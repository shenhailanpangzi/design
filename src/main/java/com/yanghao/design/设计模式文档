设计模式简介
总共有 23 种设计模式
些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）
1、创建型模式：
这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。
工厂模式（Factory Pattern）
抽象工厂模式（Abstract Factory Pattern）
单例模式（Singleton Pattern）*
建造者模式（Builder Pattern）
原型模式（Prototype Pattern）
2、结构型模式
  这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。
  适配器模式（Adapter Pattern）
  桥接模式（Bridge Pattern）
  过滤器模式（Filter、Criteria Pattern）
  组合模式（Composite Pattern）
  装饰器模式（Decorator Pattern）
  外观模式（Facade Pattern）
  享元模式（Flyweight Pattern）
  代理模式（Proxy Pattern）*
3、	行为型模式
  这些设计模式特别关注对象之间的通信。
  责任链模式（Chain of Responsibility Pattern）
  命令模式（Command Pattern）
  解释器模式（Interpreter Pattern）
  迭代器模式（Iterator Pattern）
  中介者模式（Mediator Pattern）
  备忘录模式（Memento Pattern）
  观察者模式（Observer Pattern）*
  状态模式（State Pattern）
  空对象模式（Null Object Pattern）
  策略模式（Strategy Pattern）
  模板模式（Template Pattern）
  访问者模式（Visitor Pattern）
4、J2EE 模式
  这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。
  MVC 模式（MVC Pattern）
  业务代表模式（Business Delegate Pattern）
  组合实体模式（Composite Entity Pattern）
  数据访问对象模式（Data Access Object Pattern）
  前端控制器模式（Front Controller Pattern）
  拦截过滤器模式（Intercepting Filter Pattern）
  服务定位器模式（Service Locator Pattern）
  传输对象模式（Transfer Object Pattern）

设计模式遵循的原则有6个：
  1、开闭原则（Open Close Principle）
  　　对扩展开放，对修改关闭。
  2、里氏代换原则（Liskov Substitution Principle）
  　　只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。
  3、依赖倒转原则（Dependence Inversion Principle）
  　　这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。
  4、接口隔离原则（Interface Segregation Principle）
  　　使用多个隔离的借口来降低耦合度。
  5、迪米特法则（最少知道原则）（Demeter Principle）
  　　一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
  6、合成复用原则（Composite Reuse Principle）
  　　原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。