Serializable接口

Serializable接口中一个成员函数或者成员变量也没有，这个接口的作用就是实现序列化，那什么是序列化？

序列化：对象的寿命通常随着生成该对象的程序的终止而终止，而有时候需要把在内存中的各种对象的状态（也就是实例变量，不是方法）保存下来，并且可以在需要时再将对象恢复。 Java提供了一种保存对象状态的机制，那就是序列化。

Java 序列化技术可以将一个对象的状态写入一个Byte 流里（序列化），并且可以从其它地方把该Byte 流里的数据读出来（反序列化）。

什么时候需要序列化?

想把内存中的对象状态保存到一个文件中或者数据库中时候；
想把对象通过网络进行传播的时候

如何序列化?

只要一个类实现Serializable接口，那么这个类就可以序列化了。

序列化注意事项：
序列化对象必须实现序列化接口。
序列化对象里面的属性是对象的话也要实现序列化接口。
类的对象序列化后，类的序列化ID不能轻易修改，不然反序列化会失败。
类的对象序列化后，类的属性有增加或者删除不会影响序列化，只是值会丢失。
如果父类序列化了，子类会继承父类的序列化，子类无需添加序列化接口。
如果父类没有序列化，子类序列化了，子类中的属性能正常序列化，但父类的属性会丢失，不能序列化。
用Java序列化的二进制字节数据只能由Java反序列化，不能被其他语言反序列化。如果要进行前后端或者不同语言之间的交互一般需要将对象转变成Json/Xml通用格式的数据，再恢复原来的对象。
如果某个字段不想序列化，在该字段前加上transient关键字即可。